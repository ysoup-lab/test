import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as l}from"./app-DSj3T88f.js";const t="/assets/56-CogoMwWC.png",h="/assets/58-Cx1gFpyQ.jpg",e="/assets/57-Bu2FD_5W.jpg",p="/assets/59-BfDpcY-9.jpg",k="/assets/60-CNS1YzK1.jpg",r={};function d(g,s){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="初识多线程" tabindex="-1"><a class="header-anchor" href="#初识多线程"><span>初识多线程</span></a></h1><h2 id="什么是多线程" tabindex="-1"><a class="header-anchor" href="#什么是多线程"><span>什么是多线程</span></a></h2><p>讲到线程，就不得不提进程了~</p><p>在 Windows 下打开任务管理器，可以发现我们在操作系统上运行的程序其实都是进程：</p><img src="'+t+'" alt="56" style="zoom:67%;"><h2 id="什么是进程" tabindex="-1"><a class="header-anchor" href="#什么是进程"><span>什么是进程</span></a></h2><p>进程是程序的⼀次执行，进程是⼀个程序及其数据在处理机上顺序执行时所发生的活动，进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p><p><strong>进程是系统进行资源分配和调度的独立单位，每⼀个进程都有它自己的内存空间和系统资源。</strong></p><h2 id="回到线程" tabindex="-1"><a class="header-anchor" href="#回到线程"><span>回到线程</span></a></h2><p>那系统有了进程这么⼀个概念了，进程已经是可以进行资源分配和调度了，为什么还要线程呢？</p><p>为使程序能并发执行，系统必须进行以下的⼀系列操作：</p><ol><li><strong>创建进程</strong>，系统在创建⼀个进程时，必须为它分配其所必需的、除处理机以外的所有资源，如内存空间、I/O 设备，以及建立相应的 PCB</li><li><strong>撤消进程</strong>，系统在撤消进程时，⼜必须先对其所占有的资源执行回收操作，然后再撤消 PCB；</li><li><strong>进程切换</strong>，对进程进行上下⽂切换时，需要保留当前进程的 CPU 环境，设置新选中进程的 CPU 环境，因而须花费不少的处理机时间。</li></ol><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到进程实现多处理机环境下的进程调度、分派、切换时，都需要花费较⼤的时间和空间开销。</p><p>引入线程主要是为了 <strong>提高系统的执行效率</strong>，<strong>减少处理机的空转时间和调度切换的时间</strong>，以及便于系统管理。使 OS 具有更好的并发性。</p><p>简单来说：<strong>进程实现多处理</strong> 非常耗费 CPU 的资源，⽽我们引⼊线程是作为调度和分派的基本单位（取代进程的部分基本功能【<strong>调度</strong>】）。</p><p>那么线程在哪呢？举个例⼦：</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是说：<strong>在同⼀个进程内又可以执行多个任务，而这每⼀个任务我就可以看成是⼀个线程。</strong></p><p>所以说：<strong>一个进程一般可以有 1 个或多个线程。</strong></p><h2 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h2><p>于是我们可以总结出：</p><ul><li>进程作为资源 <strong>分配</strong> 的基本单位</li><li>线程作为资源 <strong>调度</strong> 的基本单位，<strong>是程序的执行单元，执行路径</strong>（单线程：一条执行路径；多线程：多条执行路径）。是程序使用CPU的最基本单位。</li></ul><p>线程有 <strong>3 个基本状态</strong>：</p><ul><li>执行、就绪、阻塞</li></ul><p>线程有 <strong>5 种基本操作</strong>：</p><ul><li>派生、阻塞、激活、调度、结束</li></ul><h2 id="线程的属性" tabindex="-1"><a class="header-anchor" href="#线程的属性"><span>线程的属性</span></a></h2><ul><li>轻型实体</li><li>独立调度和分派的基本单位</li><li>可并发执行</li><li>共享进程资源</li></ul><p>线程有 <strong>两个基本类型</strong>：</p><ul><li><strong>用户级线程</strong>：管理过程全部由用户程序完成，<strong>操作系统内核心只对进程进行管理</strong>。</li><li><strong>系统级线程</strong>（核心级线程）：<strong>由操作系统内核进行管理</strong>。操作系统内核给应用程序提供相应的系统调用和应用程序接口 API，以使用户程序可以创建、执行以及撤消线程。</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>值得注意的是：多线程的存在，不是提高程序的执行速度。其实是 <strong>为了提高应用程序的使用率</strong>，程序的执行其实都是在 <strong>抢CPU的资源</strong>，CPU的执行权。多个进程是在抢这个资源，<strong>而其中的某⼀个进程如果执行路径比较多</strong>，就会有 <strong>更高的几率</strong> 抢到CPU的执行权</p><h2 id="并行与并发" tabindex="-1"><a class="header-anchor" href="#并行与并发"><span>并行与并发</span></a></h2><p><strong>并行</strong>：</p><ul><li>并行性是指 <strong>同一时刻内</strong> 发生两个或多个事件。</li><li>并行是在 <strong>不同实体上</strong> 的多个事件</li></ul><p><strong>并发</strong>：</p><ul><li>并发性是指 <strong>同一时间间隔内</strong> 发生两个或多个事件。</li><li>并发是在 <strong>同一实体上</strong> 的多个事件</li></ul><p>由此可见：并行是针对进程的，<strong>并发是针对线程</strong> 的。</p><h2 id="java实现多线程" tabindex="-1"><a class="header-anchor" href="#java实现多线程"><span>Java实现多线程</span></a></h2><p>java实现多线程靠的是 <code>Thread</code> 类，顶部注释如下：</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>创建多线程有 3 种方法</strong></p><ul><li>继承 Thread，重写 run() 方法</li><li>实现 Runnable 接口，重写 run() 方法</li><li>实现 Callable 接口，重写 run() 方法</li></ul><h3 id="_1-继承-thread-类-重写-run-方法" tabindex="-1"><a class="header-anchor" href="#_1-继承-thread-类-重写-run-方法"><span>1. 继承 Thread 类，重写 run() 方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyThread</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; x++) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">			System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyThreadDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 创建两个线程对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> my1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> my2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 启动线程</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        my1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		my2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实现-runnable-接口-重写-run-方法" tabindex="-1"><a class="header-anchor" href="#_2-实现-runnable-接口-重写-run-方法"><span>2. 实现 Runnable 接口，重写 run() 方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRunnable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; x++) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRunnableDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 创建MyRunnable类的对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		MyRunnable</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> my</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyRunnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-实现多线程需要注意的细节" tabindex="-1"><a class="header-anchor" href="#java-实现多线程需要注意的细节"><span>Java 实现多线程需要注意的细节</span></a></h2><p>不要将 <code>run()</code> 和 <code>start()</code> 搞混了</p><p><strong>run()和start()方法的区别：</strong></p><ul><li><code>run()</code>：仅仅是 <strong>封装被线程执行的代码</strong>，直接调用的话就成了普通方法</li><li><code>start()</code>：首先 <strong>启动了线程</strong>，然后 <strong>再由 jvm 去调用该线程的 run() 方法</strong></li></ul><p><strong>jvm 虚拟机的启动是单线程的还是多线程的?</strong></p><ul><li>是多线程的。不仅仅是启动 main 线程，还至少会启动垃圾回收线程的，不然谁帮你回收不用的内存~</li></ul><p><strong>那么，既然有两种方式实现多线程，我们使用哪一种？</strong></p><ul><li><strong>⼀般我们使用实现 Runnable 接口</strong></li><li><strong>可以避免 Java 中的单继承的限制</strong></li><li>应该将 <strong>并发运行任务和运行机制解耦</strong>，因此我们选择实现 Runnable 接口这种方式</li></ul>`,60)]))}const c=i(r,[["render",d],["__file","初识多线程.html.vue"]]),B=JSON.parse('{"path":"/Java/main/%E5%88%9D%E8%AF%86%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"初识多线程","lang":"zh-CN","frontmatter":{"title":"初识多线程","date":"2023-04-20T00:00:00.000Z","tags":["Java","多线程","线程池"],"categories":["Java"]},"headers":[{"level":2,"title":"什么是多线程","slug":"什么是多线程","link":"#什么是多线程","children":[]},{"level":2,"title":"什么是进程","slug":"什么是进程","link":"#什么是进程","children":[]},{"level":2,"title":"回到线程","slug":"回到线程","link":"#回到线程","children":[]},{"level":2,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":2,"title":"线程的属性","slug":"线程的属性","link":"#线程的属性","children":[]},{"level":2,"title":"并行与并发","slug":"并行与并发","link":"#并行与并发","children":[]},{"level":2,"title":"Java实现多线程","slug":"java实现多线程","link":"#java实现多线程","children":[{"level":3,"title":"1. 继承 Thread 类，重写 run() 方法","slug":"_1-继承-thread-类-重写-run-方法","link":"#_1-继承-thread-类-重写-run-方法","children":[]},{"level":3,"title":"2. 实现 Runnable 接口，重写 run() 方法","slug":"_2-实现-runnable-接口-重写-run-方法","link":"#_2-实现-runnable-接口-重写-run-方法","children":[]}]},{"level":2,"title":"Java 实现多线程需要注意的细节","slug":"java-实现多线程需要注意的细节","link":"#java-实现多线程需要注意的细节","children":[]}],"git":{"createdTime":1739185487000,"updatedTime":1740401099000,"contributors":[{"name":"yangji","username":"yangji","email":"2020946884@qq.cin","commits":1},{"name":"I758809","username":"I758809","email":"nick.yang03@sap.com","commits":1}]},"readingTime":{"minutes":4.95,"words":1485},"filePathRelative":"Java/main/初识多线程.md","localizedDate":"2023年4月20日","excerpt":"\\n<h2>什么是多线程</h2>\\n<p>讲到线程，就不得不提进程了~</p>\\n<p>在 Windows 下打开任务管理器，可以发现我们在操作系统上运行的程序其实都是进程：</p>\\n\\n<h2>什么是进程</h2>\\n<p>进程是程序的⼀次执行，进程是⼀个程序及其数据在处理机上顺序执行时所发生的活动，进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p>\\n<p><strong>进程是系统进行资源分配和调度的独立单位，每⼀个进程都有它自己的内存空间和系统资源。</strong></p>\\n<h2>回到线程</h2>\\n<p>那系统有了进程这么⼀个概念了，进程已经是可以进行资源分配和调度了，为什么还要线程呢？</p>"}');export{c as comp,B as data};
